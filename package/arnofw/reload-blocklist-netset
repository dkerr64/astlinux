#!/bin/sh
##
## reload-blocklist-netset
##
## Regularly update .netset IP/Net entries to be used by Arno's Iptables Firewall (AIF)
##
## Cron may be used to run this script once or twice every day.  Example:
## 15 05,15 * * * reload-blocklist-netset /mnt/kd/blocklists firehol_level1 voipbl >/dev/null 2>&1
##
## Important: Do not use the cron time schedule as above, make changes so the servers are not hit at the same time.
##
## Multiple netset entries may be space or comma separated.
##
## In this example, a /mnt/kd/blocklists/firehol_level1.netset
##              and a /mnt/kd/blocklists/voipbl.netset file will be created.
## Note: The specified directory must pre-exist, it will not be created.
##
## This script prevents any netset from being updated more often than
## the defined 'AGE' value.
##

. /etc/rc.conf

DIR="$1"

UPDATES=0

FIREHOL="${BLOCKLIST_FIREHOL_ROOT_URL:-https://iplists.firehol.org/files}"

VOIPBL="${BLOCKLIST_VOIPBL_ROOT_URL:-http://www.voipbl.org/update/}"

SPAMHAUS="${BLOCKLIST_SPAMHAUS_ROOT_URL:-https://www.spamhaus.org/drop}"

list_netsets()
{
  cat <<EOF

Available IPv4 Blocklist Netsets:
 firehol_level1: Blacklist composed from IP lists, providing maximum protection with minimum false positives.
 firehol_level2: Blacklist that track attacks, during about the last 48 hours.
 firehol_level3: Blacklist that track attacks, spyware, viruses, reported or detected in the last 30 days.
 firehol_webclient: Blacklist made from blocklists that a web client should never talk to. Use with firehol_level1.
         voipbl: VoIP Blacklist - sponsored by ScopServ International - http://www.voipbl.org/
  spamhaus_drop: Spamhaus DROP (Don't Route Or Peer), consisting of netblocks that are "hijacked" by cyber-crime operations.
 spamhaus_edrop: Spamhaus EDROP is an extension of the DROP list that includes suballocated netblocks.

Available IPv6 Blocklist Netsets:
spamhaus_dropv6: Spamhaus DROPv6 list includes IPv6 ranges allocated to spammers or cyber criminals.

EOF
}

netset_url()
{
  local netset="$1"

  case $netset in
  ## IPv4
    firehol_level1)
      URL="$FIREHOL/firehol_level1.netset"
      ALT_URL=""
      AGE=3600
      ;;
    firehol_level2)
      URL="$FIREHOL/firehol_level2.netset"
      ALT_URL=""
      AGE=3600
      ;;
    firehol_level3)
      URL="$FIREHOL/firehol_level3.netset"
      ALT_URL=""
      AGE=3600
      ;;
    firehol_webclient)
      URL="$FIREHOL/firehol_webclient.netset"
      ALT_URL=""
      AGE=3600
      ;;
     voipbl)
      URL="$VOIPBL"
      ALT_URL="$FIREHOL/voipbl.netset"
      AGE=43200
      ;;
    spamhaus_drop)
      URL="$SPAMHAUS/drop.txt"
      ALT_URL="$FIREHOL/spamhaus_drop.netset"
      AGE=43200
      ;;
    spamhaus_edrop)
      URL="$SPAMHAUS/edrop.txt"
      ALT_URL="$FIREHOL/spamhaus_edrop.netset"
      AGE=43200
      ;;

  ## IPv6
    spamhaus_dropv6)
      URL="$SPAMHAUS/dropv6.txt"
      ALT_URL=""
      AGE=43200
      ;;

    *)
      URL=""
      ALT_URL=""
      AGE=0
      ;;
  esac
}

download_file()
{
  local file="$1" url="$2"

  curl -sSfL --globoff --retry 1 --connect-timeout 15 --max-time 1800 -o "$file" "$url" >/dev/null
}

valid_update_age()
{
  local netset="$1" age="$2" file

  file="$DIR/$netset.netset"

  if [ -f "$file" ]; then
    if [ $(( $(date +%s) - $(date -r "$file" +%s) )) -lt $age ]; then
      return 1
    fi
  fi
  return 0
}

blocklist_netset()
{
  local netset tmp_file count mesg IFS

  IFS=' ,'
  for netset in $*; do
    unset IFS
    netset_url $netset
    if [ -z "$URL" ]; then
      echo "reload-blocklist-netset: Unknown Netset: $netset" >&2
      continue
    fi
    if ! valid_update_age $netset $AGE; then
      echo "reload-blocklist-netset: The file '$netset.netset' has been updated within $AGE seconds, skipping." >&2
      continue
    fi
    tmp_file="$(mktemp "/tmp/reload_blocklist.XXXXXX")"
    if ! download_file "$tmp_file" "$URL"; then
      if [ -z "$ALT_URL" ] || ! download_file "$tmp_file" "$ALT_URL"; then
        rm -f "$tmp_file"
        mesg="Retrieving '$netset' netset failed for '$URL', skipping."
        logger -s -t reload-blocklist-netset -p kern.info "$mesg"
        continue
      fi
    fi
    if grep -q -i -e '^<!DOCTYPE HTML' -e '^<HTML' "$tmp_file"; then
      rm -f "$tmp_file"
      mesg="Netset '$netset' text format is invalid for '$URL', skipping."
      logger -s -t reload-blocklist-netset -p kern.info "$mesg"
      continue
    fi

    cp "$tmp_file" "$DIR/$netset.netset"
    rm -f "$tmp_file"
    UPDATES=$((UPDATES + 1))

    count=$(grep -c '^[0-9a-fA-F]' "$DIR/$netset.netset")
    mesg="Netset '$netset' has been updated. Contains $count addresses/nets."
    logger -t reload-blocklist-netset -p kern.info "$mesg"
    echo "$mesg"
  done
}

if [ -z "$DIR" ]; then
  echo "Usage: reload-blocklist-netset netset_dir netset_1 [ netset_2 ... ]"
  list_netsets
  exit 1
fi

if [ ! -d "$DIR" ]; then
  echo "reload-blocklist-netset: Directory not found: $DIR"
  exit 1
fi

shift 1

if [ -z "$1" ]; then
  list_netsets
  exit 1
fi

blocklist_netset "$@"

if [ $UPDATES -gt 0 ]; then
  arno-iptables-firewall force-reload
fi

