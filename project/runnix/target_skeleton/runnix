#!/bin/sh
export PATH="/usr/bin:/bin:/usr/sbin:/sbin"

# BASE is where the runnix partition is mounted
BASE="/mnt/base"

# ROOT is where the .run partition is mounted
ROOT="/mnt/root"

RUNVER="$(cat /etc/runnix-release)"

DRIVES="sda sdb sdc sdd sde sdf sdg sdh vda vdb vdc vdd"

setup_nvme() {
  # Create /dev/nvme* devices.  Cannot do this in target skeleton as
  # the major number for nvme block devices is >255 and that is not
  # working during build. So do it on boot.
  local char_major=$(cat /proc/devices | grep nvme | cut -d' ' -f 1)
  if [ -z "$char_major" ]; then return; fi
  # The kernel was built with NVMe support.  Create device stubs.
  # We will do two controllers [0..1] and look for attached drives.
  local char_minor=0
  local blk_major=0
  local blk_minor=0
  local blk_dev=""
  local blk_name=""
  local NL='
'

  mount -o remount,rw /dev/root /
  for char_minor in 0 1; do
    IFS=$NL
    blk_name=""
    for blk_dev in $(grep -e "nvme${char_minor}" /proc/diskstats); do
      blk_major="$(echo $blk_dev | awk '{print $1}')"
      blk_minor="$(echo $blk_dev | awk '{print $2}')"
      blk_name="$(echo $blk_dev | awk '{print $3}')"
      mknod -m 600 "/dev/${blk_name}" b $blk_major $blk_minor
      # if not partition add to $DRIVES
      # should probably do it the other way around, only add partitions
      # but that would require changes to how sda/vda etc. are handled
      # (but it would be cleaner)
      if [ "$(echo $blk_name | cut -c 8)" != "p" ]; then
        DRIVES="$DRIVES $blk_name"
      fi
    done
    unset IFS
    if [ -n "$blk_name" ]; then
      mknod -m 600 "/dev/nvme${char_minor}" c "$char_major" $char_minor
    fi
  done
  mount -o remount,ro /dev/root /
}

setup_network () {

  if [ -z "$NDEV" -a -n "$1" ]; then
    NDEV="$1"
  fi

  #VLANS
  for i in $VLANS; do
    IF="$(echo $i | cut -d. -f1)"
    VID="$(echo $i | cut -d. -f2)"
    ifconfig $IF up
    vconfig add $IF $VID > /dev/null
  done

  if [ -n "$NDEV" ]; then
    ifconfig lo up 127.0.0.1

    if [ -n "$MAC" ]; then
      ifconfig "$NDEV" hw ether "$MAC"
    fi

    if [ -z "$IP" -o "$IP" = "dhcp" ]; then
      echo "Configuring $NDEV with DHCP..."
      udhcpc -nq -T2 -t6 -s /etc/udhcpc.script -i "$NDEV"
    elif [ -n "$IP" -a -n "$NM" ]; then
      ifconfig "$NDEV" "$IP" netmask "$NM"

      if [ -n "$GW" ]; then
        route add -net default gw "$GW" dev "$NDEV"
      fi

      for i in $DNS; do
        echo "nameserver $i" >> /tmp/etc/resolv.conf
      done

    fi
    return 0
  fi

  return 1
}

setup_ssh () {

  if [ -z "$SSHPORT" -a -n "$1" ]; then
    SSHPORT="$1"
  fi

  if [ -n "$SSHPORT" ]; then
    mount -t devpts devpts /dev/pts

    mkdir /tmp/etc/dropbear
    mkdir /tmp/.ssh

    echo "Generating keys..."
    dropbearkey -t rsa -f /tmp/etc/dropbear/dropbear_rsa_host_key -s 1024
    dropbearkey -t dss -f /tmp/etc/dropbear/dropbear_dss_host_key -s 1024
    dropbearkey -t ecdsa -f /tmp/etc/dropbear/dropbear_ecdsa_host_key

    touch /var/log/lastlog
    touch /var/log/wtmp

    echo "Starting SSH..."
    dropbear -E -P /tmp/dropbear.pid -p $SSHPORT

    myipv4="$(ip -o addr show dev "$NDEV" 2>/dev/null | awk '$3 == "inet" { split($4, field, "/"); print field[1]; }')"
    if [ -n "$myipv4" ]; then
      echo "
==================
SSH server started.
Example, copy a file to the RUNNIX base partition via a remote host:

remote-host$ scp -P $SSHPORT filename root@$myipv4:/mnt/base/filename
(Password: runnix)
==================
"
    fi
    return 0
  fi

  return 1
}

do_failure () {

  if setup_network; then
    setup_ssh
  fi

  do_shell
}

do_shell () {
  echo "Dropping to shell, type 'exit' to reboot"

  export PS1='runnix# '

  # Check for video console, and load os/console.kmap if it exists
  if ! echo "$CMDLINE" | grep -q "console="; then
    if [ -f $BASE/os/console.kmap ]; then
      echo "Loading console keyboard map: $BASE/os/console.kmap"
      loadkmap < $BASE/os/console.kmap
    fi
  fi

  /bin/sh -i </dev/console >/dev/console 2>/dev/console

  # Unmount all file systems or remount 'ro' if busy
  sync
  umount -a -r 2>/dev/null

  # and reboot when done
  reboot -f
}

echo "

Runnix version '$RUNVER' starting..."

mount -t proc none /proc
mount -t sysfs none /sys
mount -t tmpfs none /tmp
mkdir /tmp/etc
setup_nvme

CMDLINE="$(cat /proc/cmdline)"

DEVICE=""

for x in $DRIVES; do
  [[ "$(echo $x | cut -c-3)" = "nvm" ]] && p="p" || p=""
  if mount -t vfat /dev/${x}${p}1 $BASE 2>/dev/null; then
    if [ -f $BASE/os/astflag ]; then
      DEVICE="${x}"
      break
    else
      umount /dev/${x}1
    fi
  fi
done

if [ -z "$DEVICE" ]; then
  for x in $DRIVES; do
    if mount -t iso9660 -o ro /dev/${x} $BASE 2>/dev/null; then
      if [ -f $BASE/os/astflag ]; then
        DEVICE="${x}"
        break
      else
        umount /dev/${x}
      fi
    fi
  done
fi

# Control kernel console messages
sysctl -w kernel.printk="3 4 1 3" >/dev/null

hostname runnix

# Loader not found
if [ -z "$DEVICE" ]; then
  echo "Runnix: AstLinux medium not found."
  do_shell
  # reboot
fi

# get image name
for i in $CMDLINE; do
  case $i in
  runimg=*)
    RUNIMG="$(echo $i | cut -c8-)"
    ;;
  esac
done

if [ -f $BASE/os/default.conf ]; then
  . $BASE/os/default.conf
fi

if echo "$CMDLINE" | grep -q doshell; then
  if echo "$CMDLINE" | grep -q doshell_ssh; then
    if setup_network eth0; then
      setup_ssh 2222
    fi
  fi
  do_shell
  # reboot
fi

if [ -z "$RUNIMG" ]; then
  RUNIMG="auto"
fi

# Get the latest good one if "auto"
cd $BASE/os
if [ "$RUNIMG" = "auto" ]; then
  RUNIMG="$(ls *.run | tail -n1)"
fi

#If we have a ver file, override auto/default.conf value
if [ -f $BASE/os/ver ]; then
  RUNIMG="$(cat $BASE/os/ver).run"
fi

if [ "$VERIFY_LOCAL" = "yes" ]; then
  echo "Verifying $RUNIMG..."

  if sha1sum -cs $RUNIMG.sha1; then
    echo "$RUNIMG verified"
    IMGVER=1
  else
    echo "$RUNIMG not verified"
  fi
else
  echo "Skip Verifying $RUNIMG"
fi

if [ -f $BASE/os/$RUNIMG.conf ]; then
  . $BASE/os/$RUNIMG.conf
fi

if [ "$INITRAMFS" = "yes" ]; then
  if [ -n "$KCMD" ]; then
    echo "Image is initramfs, booting now..."
    /sbin/kexec --command-line="$KCMD" -f $BASE/os/$RUNIMG
    do_failure
  else
    echo "You need to specify KCMD with initramfs"
    do_failure
  fi
fi

# Find first unused loop device
DEVLOOP="$(losetup -f)"

if [ -z "$OFFSET" ]; then
  losetup $DEVLOOP $BASE/os/$RUNIMG
else
  losetup -o "$OFFSET" $DEVLOOP $BASE/os/$RUNIMG
fi

if [ -z "$FSTYPE" ]; then
  FSTYPE="ext2"
fi

if ! mount -t $FSTYPE -o ro $DEVLOOP $ROOT; then
  echo "Error mounting $RUNIMG root fs"
  do_failure
fi

if [ -n "$INITRD" ]; then
  if [ -f "$INITRD" ]; then
    echo "Custom initrd $INITRD found"
  else
    INITRD=$BASE/os/initrd.img
    echo "Custom initrd not found - using $INITRD"
  fi
else
  echo "Using default initrd"
  INITRD=$BASE/os/initrd.img
fi

if [ -n "$KERN" ]; then
  if [ -f "$KERN" ]; then
    echo "Custom kernel $KERN found"
  else
    KERN=$ROOT/boot/bzImage
    echo "Custom kernel not found - using $KERN"
  fi
else
  echo "Using default kernel"
  KERN=$ROOT/boot/bzImage
fi

if [ -n "$KCMD" -a -f "$INITRD" -a -f "$KERN" ]; then
  echo "Loading new kernel..."
  if ! /sbin/kexec -l --command-line="$KCMD" --initrd="$INITRD" "$KERN"; then
    umount $ROOT
    do_failure
  fi
  umount $ROOT
else
  echo "Missing one or more of: kcmd, initrd, kernel"
  umount $ROOT
  do_failure
fi

cd /
losetup -d $DEVLOOP

# Unmount all file systems or remount 'ro' if busy
sync
umount -a -r 2>/dev/null

echo "Trying kexec..."
/sbin/kexec -e

do_shell
# reboot
