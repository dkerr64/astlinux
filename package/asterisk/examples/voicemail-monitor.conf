; Implement call screening for Asterisk voicemail.
; Author: David Kerr (c) Copyright 2017
; Licensed under GPL
;
; Requires Asterisk 15, or custom Asterisk 13 patched with this...
; https://github.com/dkerr64/astlinux/blob/develop/package/asterisk/asterisk-13-app-originate.patch
; see...
; https://issues.asterisk.org/jira/browse/ASTERISK-26587
; 
;
; An extension can monitor an incoming caller leave a message on their
; voicemail.  If the callee decides to speak to the caller they can 
; intercept the voicemail by pressing any key on their phone, recording
; will be suspended and the two parties can talk to each other.
;
; In a household environment it may be desirable to intercept the caller
; from another extension.  You can do this by dialing 1 from any other extension
; in the house.  You can also use this dial 1 feature to join another conversation
; already in place in your household even if someone is not leaving a voicemail.
;

[DefaultDialPlan]
; Add this to your default dialplan if you want to support intercept
; from any extension in your household...
; Dial 1 to intercept voicemail being monitored by another extension
; or to connect to another conversation underway (3-way call).
; Note filter on extension, in this case to match against caller coming
; from range of extensions 100 to 109...  This protects against any other
; extension intercepting the conversation.
exten = 1/_10x,1,Goto(BargeIn,s,1)
; Test by dialing 123 (assumes you have a mailbox 123)
exten = 123,Goto(voicemail-monitor,${EXTEN},1)

[ring-answer]
; If channel is already answered then return,
; else ring for two seconds then answer channel and return
exten = s,1,ExecIf($["${CDR(answer)}"!=""]?Return())
 same = n,Ringing()
 same = n,Wait(2)
 same = n,Answer()
 same = n,Return()

[voicemail-leavemessage]
; Leaving a voicemail by entering here does not enable call screening so a
; private message can be left if desired.
exten = _X.,1,NoOp(leave voicemail without screening)
 same = n,GoSub(ring-answer,s,1)
 same = n,Set(VM_MONITOR=) ; no monitoring extension
; Going to "greeting" bypasses setting of monitor extension
 same = n,GoTo(voicemail-monitor,${EXTEN},greeting)

[voicemail-monitor]
; Leaving a voicemail by entering here will enable call screening.  Message is
; to be recorded into ${EXTEN} mailbox and the channel SIP/${EXTEN} will 
; listen to the greeting and message as it is recorded.
exten = _X.,1,NoOp(voicemail and screen incoming callers message)
 same = n,GoSub(ring-answer,s,1)
; Technology of monitoring extension is assumed to be SIP.
 same = n,Set(VM_MONITOR=SIP/${EXTEN})
; Originate a call to that extension and connect it to context MonitorVoicemail
 same = n,Originate(${VM_MONITOR},exten,MonitorVoicemail,s,1,3,b(MonitorVoicemailPredial,s,1(${CALLERID(all)},${CHANNEL(name)})))
; If Originate failed then proceed without screening the voice message
 same = n,ExecIf($["${ORIGINATE_STATUS}"!="SUCCESS"]?Set(VM_MONITOR=))
 same = n(greeting),Set(TIMEOUT(response)=1)
 same = n,Set(INBOUND_EXTEN=${EXTEN})
 same = n,Set(TIMEOUT(digit)=1)
; I have a custom recorded "thank you for calling message" outside of
; Asterisks voicemail system.  But you could bypass all this and  go
; straight into Voicemail (like option 1 or timeout).
 same = n,Background(record/NoAnswer)
 same = n,WaitExten(1)
; My message gives callers option to press 0,1,2,3,4 or just timeout to leave message,
; If person leaving voicemail selects alternate action then suspend screening voicemail.
exten = 0,1,ExecIf($["${VM_MONITOR}"!=""]?ChannelRedirect(${SHARED(VM_MONITOR_CHANNEL)},MonitorVoicemail,h,1))
 same = n,Goto(voicemenu-kerrfamily,${INBOUND_EXTEN},1)  ; Replace by your action for 0
exten = 1,1,Voicemail(${INBOUND_EXTEN},us)
 same = n,Hangup()
exten = 2,1,ExecIf($["${VM_MONITOR}"!=""]?ChannelRedirect(${SHARED(VM_MONITOR_CHANNEL)},MonitorVoicemail,h,1))
 same = n,Goto(outside-call,${DB(actionlist/PhoneDavidCell)},1)  ; Replace by your action for 2
exten = 3,1,ExecIf($["${VM_MONITOR}"!=""]?ChannelRedirect(${SHARED(VM_MONITOR_CHANNEL)},MonitorVoicemail,h,1))
 same = n,Goto(outside-call,${DB(actionlist/PhonePohCell)},1)  ; Replace by your action for 3
exten = 4,1,ExecIf($["${VM_MONITOR}"!=""]?ChannelRedirect(${SHARED(VM_MONITOR_CHANNEL)},MonitorVoicemail,h,1))
 same = n,Goto(voicemenu-advanced,${INBOUND_EXTEN},1)  ; Replace by your action for 4
exten = t,1,Voicemail(${INBOUND_EXTEN},us)
 same = n,Hangup()
exten = i,1,Playback(pbx-invalid)
 same = n,Goto(${INBOUND_EXTEN},greeting)
exten = h,1,Hangup()

[MonitorVoicemailPredial]
exten = s,1,NoCDR()
; This context is executed on the monitoring channel before it connects.
; Before originating a call to the monitoring extension add SIP header.
; This header works for Yealink T46G phones to cause it to auto answer
; Replace with appropriate header for your devices.
 same = n,SIPAddHeader(Call-Info:answer-after=0)
 same = n,Set(CALLERID(all)=${ARG1}) ; This is the caller ID of the caller
 same = n,Set(INBOUND_CHANNEL=${ARG2}) ; This is the channel of the caller leaving voicemail
; Now we will share with the caller channel the channel of the monitoring extension
 same = n,Set(SHARED(VM_MONITOR_CHANNEL,${INBOUND_CHANNEL})=${CHANNEL(name)})
 same = n,Return()

[MonitorVoicemail]
exten = s,1,Answer()
; When the monitoring extension answers (which it should do automatically) it
; connects to this context.  We will use ChanSpy to spy on the caller, which will
; have been connected to voicemail
 same = n,ChanSpy(${INBOUND_CHANNEL},qsSX)
 same = n,Hangup() ; we should never get here
; If the monitoring extension presses any key, then it bridges into the callers
; channel which will hangup the voicemail (stop recording).
exten = _[*#0-9],1,Set(BRIDGE_TO=${INBOUND_CHANNEL}) ; Note name of channel leaving voicemail
 same = n,Set(SHARED(VM_MONITOR_CHANNEL,${INBOUND_CHANNEL})=) ; As we are no longer monitoring, reset this variable
 same = n,Set(INBOUND_CHANNEL=) ; As we are no longer monitoring, reset this variable
 same = n,Bridge(${BRIDGE_TO},F(ChanSpyHangup,s,1))
 same = n,Hangup()
; Channel redirect's send monitoring extension to hangup exten if caller presses
; a key or if another extension intercepts the call by barging in.
exten = h,1,Hangup()

[BargeIn]
exten = s,1,NoOp(Intercept voicemail or barge in to an existing conversation)
; we are going to connect ourself to either an existing conversation taking place
; with another extension in the household, or to a caller actively leaving a
; voicemail on which another channel is spying (call screening).
 same = n,Set(SELECTED_CHANS=${LISTFILTER(CHANNELS((SIP/[0-9]+)), ,${CHANNEL(name)})}) ;space between commas required
; Above line got a list of all active channels whose names start with SIP/x where x is number 0-9.
; Then removed our channel (channel currently executing in this context) from that list.
; Now remove the last channel from the list... most likely to be channel we care about.
 same = n,Set(LAST_CHAN=${POP(SELECTED_CHANS, )}) ;space after comma required
; If last connected channel is blank then no existing call. Hangup
 same = n,GotoIf($["${LAST_CHAN}" = ""]?ChanSpyHangup,s,1)
; If INBOUND_CHANNEL is set then the channel is screening an active voicemail
 same = n,GotoIf($["${IMPORT(${LAST_CHAN},INBOUND_CHANNEL)}"!=""]?vm-monitor)
; Or if LAST_CHAN is actually the caller then check if VM_MONITOR_CHANNEL is set
 same = n,GotoIf($["${SHARED(VM_MONITOR_CHANNEL,${LAST_CHAN})}"!=""]?vm-monitor)
; Continue here when case is not intercepting a voicemail but will join existing call.
; If CHANSPYPEER already set in the other channel hangup (to prevent more than one barge-in)
 same = n,ExecIf($["${SHARED(CHANSPYPEER,${LAST_CHAN})}" != ""]?Hangup())
 same = n,Verbose(My channel ${CHANNEL(name)} about to spy on ${LAST_CHAN})
; Store relevant information into the channels that we are about to spy on.
 same = n,Set(SHARED(CHANSPYPEER)=${LAST_CHAN})
 same = n,Set(SHARED(CHANSPYPEER,${LAST_CHAN})=${CHANNEL(name)})
 same = n,Set(SHARED(CHANSPYPEER,${IMPORT(${LAST_CHAN},BRIDGEPEER)})=${CHANNEL(name)})
 same = n,Playback(beep)
 same = n,ChanSpy(${LAST_CHAN},BqsS)
 same = n,Hangup() ; we should never get here
; If we are connecting to person leaving voicemail first we need to hangup
; the extension doing the monitoring then we bridge to the incoming channel.
 same = n(vm-monitor),NoOp(Intercept incoming voicemail channel)
 same = n,Set(CHANNEL_TO_INTERCEPT=${IMPORT(${LAST_CHAN},INBOUND_CHANNEL)})
 same = n,Set(MONITORING_CHANNEL=${LAST_CHAN});
 same = n,GotoIf($["${CHANNEL_TO_INTERCEPT}"!=""]?connect)
; If LAST_CHAN is the caller, then CHANNEL_TO_INTERCEPT will be null, so we need
; to get MONITORING_CHANNEL from the callers channel, and bridge will be LAST_CHAN
 same = n,Set(MONITORING_CHANNEL=${SHARED(VM_MONITOR_CHANNEL,${LAST_CHAN})})
 same = n,Set(CHANNEL_TO_INTERCEPT=${LAST_CHAN})
; Hangup the monitoring channel
 same = n(connect),ChannelRedirect(${MONITORING_CHANNEL},MonitorVoicemail,h,1)
 same = n,Playback(beep)
; Connect into the callers channel, this automatically suspends recording voicemail
 same = n,Bridge(${CHANNEL_TO_INTERCEPT},F(ChanSpyHangup,s,1))
 same = n,Goto(ChanSpyHangup,s,1)
exten = h,1,ExecIf($["${CHANNEL(channeltype)}"="Surrogate"]?Hangup())
 same = n,Set(SHARED(CHANSPYPEER,${SHARED(CHANSPYPEER)})=)
 same = n,ExecIf($["${CDR(disposition)}"="FAILED"]?NoCDR())
 same = n,ExecIf($["${CDR(disposition)}"="ANSWERED" && "${CDR(billsec)}"="0"]?NoCDR())
 same = n,ExecIf($["${CDR(disposition)}"="" && "${CDR(billsec)}"="0"]?NoCDR())
 same = n,Hangup()

[ChanSpyHangup]
exten = s,1,NoOp(Hangup and bridge other channel if ChanSpy active)
; If you are going to allow an extension to join another conversation in the same
; household then you must use this hangup function in place of regular hangup for
; calls that you Dial(). See example below.
; So if one extension hangs up, the remaining two bridge together instead of also hangup.
; We need to mutex this with a semaphore to make sure that two channels hangup in
; sequence, one after the other, rather than simultaneously.
 same = n(hangup-or-bridge),ExecIf($["${LOCK(hangup-lock)}"="0"]?Hangup())
 same = n,ExecIf($["${SHARED(CHANSPYPEER)}"=""]?Hangup())
 same = n,Set(CHANNEL_TO_BRIDGE_TO=${SHARED(CHANSPYPEER)})
 same = n,Set(SHARED(CHANSPYPEER)=)
; This is the part that needs mutex, to be sure other channel doesn't hangup
; in the middle of testing whether it exists.
 same = n,ExecIf($["${REGEX("${CHANNEL_TO_BRIDGE_TO}" ${CHANNELS()})}"="0"]?Hangup())
 same = n,Set(release=${UNLOCK(hangup-lock)}) ; release semaphore
 same = n,Bridge(${CHANNEL_TO_BRIDGE_TO},F(ChanSpyHangup,s,1))
 same = n,Goto(hangup-or-bridge)
exten = h,1,ExecIf($["${CHANNEL(channeltype)}"="Surrogate"]?Hangup())
 same = n,ExecIf($["${CDR(disposition)}"="FAILED"]?NoCDR())
 same = n,ExecIf($["${CDR(disposition)}"="ANSWERED" && "${CDR(billsec)}"="0"]?NoCDR())
 same = n,ExecIf($["${CDR(disposition)}"="ANSWERED" && "${CDR(billsec)}"="0"]?NoCDR())
 same = n,Hangup()

[dial-SIP-exten]
exten = _X.,1,NoOp(Dial a SIP extension)
; Example of dialing an extension where we need to special handle the hangup.
 same = n,Set(DIAL_EXTEN=SIP/${EXTEN})
 same = n,Dial(${DIAL_EXTEN},igoF(ChanSpyHangup,s,1))
 same = n,Goto(dialstatus-${DIALSTATUS},1)
exten = dialstatus-ANSWER,1,GoTo(ChanSpyHangup,s,1)
exten = _dialstatus-!,1,GoTo(ChanSpyHangup,s,1)
exten = h,1,GoTo(ChanSpyHangup,s,1)
