#!/bin/sh

# Default settings. Override in user.conf file.
QEMU_START=yes
# QEMU_CDROM_IMAGE=/path/to/iso/file -- Optional.
# QEMU_RUN_IMAGE=/path/to/vm/image -- Required, must be set in user.conf file
# QEMU_MEM=1024 -- (value in MB) default set below to lesser of 50% of total memory or 90% of free memory
# QEMU_VCPU=2 -- default set below to half of available CPU cores
QEMU_NET_DEVICE=virtio-net-pci
QEMU_NET_BRIDGE=br0
# QEMU_NET_MACADDR=52:54:00:12:34:56 -- Optional, leave blank for QEMU to assign
QEMU_BLOCK_DEVICE=virtio
QEMU_VNC_DISPLAY=1
# QEMU_VNC_TLS="yes" -- Optional, if not set then VNC sessions will be unencrypted (default)
QEMU_VNC_TLS_DIR=/mnt/kd/ssl/qemu

. /etc/rc.conf

start () {

  if [ "$QEMU_START" = "yes" ] && [ -n "$QEMU_RUN_IMAGE" ]; then
    echo "Starting qemu..."
    # find system memory in MB
    TotMem=$(free -m | awk '/^Mem:/{print $2}')
    FreeMem=$(free -m | awk '/^Mem:/{print $4}')
    if [ -z "$QEMU_MEM" ]; then
      # set Memory to the smaller of 50% of total system memory or 90% of available free memory
      QemuMemory=$((`expr $TotMem / 2` < `expr $FreeMem \* 9 / 10` ? `expr $TotMem / 2` : `expr $FreeMem \* 9 / 10`))
    else
      # set Memory to user provided value
      QemuMemory=$QEMU_MEM
      if [ $QemuMemory -gt $FreeMem ]; then
        /usr/bin/logger -s -p user.warning -id -t qemu "WARNING: $QemuMemory MB exceeds system available memory of $FreeMem"
      fi
    fi
    
    CpuCores=$(lscpu -p | /bin/egrep -v '^#' | wc -l)
    if [ -z "$QEMU_VCPU" ]; then
      # Set vCPU cores to half available system cores
      QemuVCpu=$(($CpuCores>1 ? `expr $CpuCores / 2` : 1))
    else
      # set vCPU cores to user provided value
      QemuVCpu=$QEMU_VCPU
      if [ $QemuVCpu -gt $CpuCores ]; then
        /usr/bin/logger -s -p user.warning -id -t qemu "WARNING: $QemuVCpu cores exceeds system available cores of $CpuCores"
      fi
    fi
    if [ $QemuVCpu == 1 ]; then 
      QemuVCpuStr=""
    else
      QemuVCpuStr="-smp cpus=$QemuVCpu"
    fi

    # Was a CDROM ISO file provided?
    QemuCdrom=""
    if [ -n "$QEMU_CDROM_IMAGE" ]; then
      QemuCdrom="-boot once=d -cdrom $QEMU_CDROM_IMAGE"
    fi

    # If network device virtio then enable host support
    if [ "$QEMU_NET_DEVICE" = "virtio-net-pci" ]; then
      QemuVHost=",vhost=on"
    else
      QemuVHost=""
    fi

    iNet=0
    QemuNetdev=""
    QemuDevice=""
    QemuMacAddr=""
    if [ -n "$QEMU_NET_MACADDR" ]; then
      QemuMacAddr=$QEMU_NET_MACADDR
    fi
    for iBridge in $QEMU_NET_BRIDGE; do
      # Make sure network bridge exists.  If not then exit
      /sbin/ip addr show dev $iBridge >/dev/null 2>&1
      if [ $? == 1 ]; then
        /usr/bin/logger -s -p user.err -id -t qemu "ERROR: Bridge $iBridge does not exist.  Exiting"
        exit
      fi
      # Make sure that the bridge helper ACL list allows access to the network bridge we selected.
      /bin/grep -v '^$' /etc/qemu/bridge.conf | /bin/grep -v '^ *#' | /bin/grep "allow $iBridge" > /dev/null
      if [ $? == 1 ]; then
        /usr/bin/logger -s -p user.err -id -t qemu "ERROR: ACL permissions for bridge $iBridge not set in /etc/qemu/bridge.conf.  Exiting"
        exit
      fi
      # Check tcp-segmentation-offload and general-segmentation-offload
      /usr/sbin/ethtool -k $iBridge | /bin/grep "segmentation-offload" | /bin/grep ": off" > /dev/null
      if [ $? == 0 ]; then
        /usr/bin/logger -s -p user.warning -id -t qemu "WARNING: host $iBridge interface has TSO or GSO set to off.  Consider setting guest network interface to match with ethtool -K <if> command"
      fi
      # build the -netdev and -device options
      ((iNet++))
      QemuNetdev=$QemuNetdev" -netdev tap,id=nd$iNet,helper=\"/usr/libexec/qemu-bridge-helper --br=$iBridge\"$QemuVHost"
      QemuDevice=$QemuDevice" -device $QEMU_NET_DEVICE,netdev=nd$iNet,id=nic$iNet"
      if [ -n "$QemuMacAddr" ]; then
           QemuDevice=$QemuDevice",mac=$QemuMacAddr"
           # Now increment mac address by 1 in case there are multiple interfaces
           macHead="$(echo $QemuMacAddr | cut -d: -f1-5)"
           macTail="$(echo $QemuMacAddr | cut -d: -f6)"
           macTail=$(printf %X $((0x$macTail + 1)))
           QemuMacAddr="$macHead:${macTail:(-2)}"
      fi
    done

    # Do we want VNC sessions encrypted?
    QemuVnc="-vnc :$QEMU_VNC_DISPLAY,websocket"
    QemuVncTls=""
    if  [ "$QEMU_VNC_TLS" = "yes" ] && [ -n "$QEMU_VNC_TLS_DIR" ]; then
      if [ -d "$QEMU_VNC_TLS_DIR" ] &&
         [ -s "${QEMU_VNC_TLS_DIR}/ca-cert.pem" ] &&
         [ -s "${QEMU_VNC_TLS_DIR}/server-cert.pem" ] &&
         [ -s "${QEMU_VNC_TLS_DIR}/server-key.pem" ]; then
        QemuVncTls="-object tls-creds-x509,dir=$QEMU_VNC_TLS_DIR,id=tls0,endpoint=server,verify-peer=no"
        QemuVnc="${QemuVnc},tls-creds=tls0"
      else
        /usr/bin/logger -s -p user.err -id -t qemu "ERROR: TLS credentials missing in $QEMU_VNC_TLS_DIR.  Exiting"
        exit
      fi
    fi

    # Load required modules in case they are not already loaded... kvm kvm-amd or kvm-intel and vhost_net
    /bin/grep "flags" /proc/cpuinfo | /bin/grep " lm" > /dev/null
    # Presence of 'lm' flag indicates 64-bit processor
    if [ $? == 0 ]; then
      /sbin/modprobe kvm
      if [ $? == 1 ]; then
        /usr/bin/logger -s -p user.err -id -t qemu "ERROR: Failed to load kernel module kvm.  Exiting"
        exit
      fi
      /bin/grep "flags" /proc/cpuinfo | /bin/grep " vmx" > /dev/null
      # Presence of 'vmx' indicates intel virtualization extensions
      if [ $? == 0 ]; then
        /sbin/modprobe kvm-intel
        if [ $? == 1 ]; then
          /usr/bin/logger -s -p user.err -id -t qemu "ERROR: Failed to load kernel module kvm-intel.  Exiting"
          exit
        fi
      else
        /bin/grep "flags" /proc/cpuinfo | /bin/grep " svm" > /dev/null
        # Presence of 'svm' indicates AMD virtualization extensions
        if [ $? == 0 ]; then          
          /sbin/modprobe kvm-amd
          if [ $? == 1 ]; then
            /usr/bin/logger -s -p user.err -id -t qemu "ERROR: Failed to load kernel module kvm-amd.  Exiting"
            exit
          fi
        else
          /usr/bin/logger -s -p user.err -id -t qemu "ERROR: Host CPU does not support virtualization.  Exiting"
          exit
        fi
      fi
      if [ -n "$QemuVHost" ]; then
        # Only load vhost_net if virtio network device selected
        /sbin/modprobe vhost_net
        if [ $? == 1 ]; then
          /usr/bin/logger -s -p user.err -id -t qemu "ERROR: Failed to load kernel module vhost_net.  Exiting"
          exit
        fi
      fi
     else
      /usr/bin/logger -s -p user.err -id -t qemu "ERROR: Host CPU is not 64-bit architecture.  Exiting"
      exit
    fi

    # And now run qemu.
    /usr/bin/logger -s -p user.info -id -t qemu "Run image $QEMU_RUN_IMAGE with $QemuMemory MB of Memory and $QemuVCpu CPU cores on Network $QEMU_NET_BRIDGE.  Console on VNC port 590$QEMU_VNC_DISPLAY"
    eval /usr/bin/qemu \
        -m $QemuMemory \
        $QemuNetdev \
        $QemuDevice \
        $QemuCdrom \
        -drive file="\"$QEMU_RUN_IMAGE\"",if=$QEMU_BLOCK_DEVICE \
        -enable-kvm \
        $QemuVCpuStr \
        -qmp tcp:localhost:4444,server,nowait \
        -daemonize \
        -usb \
        -device usb-tablet \
        $QemuVncTls \
        $QemuVnc

    if [ $? == 1 ]; then
      # Something went wrong.
      /usr/bin/logger -s -p user.err -id -t qemu "ERROR: Failed to run image $QEMU_RUN_IMAGE"
      exit
    fi
  fi
}

stop () {

  /bin/netstat -ln | /bin/grep :4444 > /dev/null
  if [ $? == 0 ]; then
    echo "Stopping qemu..."
    echo -e "{ \"execute\": \"qmp_capabilities\" }\n{ \"execute\": \"system_powerdown\" }\n" | /usr/bin/nc -w 10 localhost 4444 >/dev/null
  else
    /usr/bin/logger -s -p user.warning -id -t qemu "WARNING: cannot stop -- qemu not running."
  fi
}

if [ ! -x /usr/bin/qemu ]; then
  exit
fi

case $1 in

start)
  if [ -n "$2" ]; then
    # We got some args after the "start" lets parse them into variables.
    # e.g /etc/init.d/qemu start QEMU_CDROM_IMAGE=/path/to/iso/file QEMU_RUN_IMAGE=/path/to/vm/image
    for i in "${@:2}"; do
      declare ${i%=*}="${i#*=}"
    done
  fi
  start
  ;;

stop)
  stop
  ;;

init)
  start
  ;;

restart)
  stop
  sleep 2
  start
  ;;

*)
  echo "Usage: start|stop|restart"
  ;;

esac
