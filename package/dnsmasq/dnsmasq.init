#!/bin/bash

. /etc/rc.conf

. /etc/init.d/functions.d/network
. /etc/init.d/functions.d/misc

directive_exists_with_file() {
  local directive="$1" file="$2"

  if [ -f "$file" ]; then
    if grep -q "^${directive} *=" "$file"; then
      return 0
    fi
  fi

  return 1
}

dnscrypt_tls_proxy_servers()
{
  local servers=""

  if [ -f /etc/init.d/dnscrypt ]; then
    if [ "$DNSCRYPT_PROXY" = "yes" ]; then
      servers="127.0.0.1#2053"
      if [ -n "$DNSCRYPT_2SERVER_ADDRESS" ]; then
        servers="$servers 127.0.0.1#2054"
      fi
    fi
  fi

  ## Unbound has precedence
  if [ -f /etc/init.d/unbound ]; then
    if [ "$DNS_TLS_PROXY" = "yes" ]; then
      servers="127.0.0.1#2853"
    fi
  fi

  echo "$servers"
}

tftpd_check()
{
  if [ -f /etc/init.d/tftpd ]; then
    # standalone tftpd package is installed ( allow 'inetd' for backward compatibility )
    if [ "$TFTPD" = "dnsmasq" -o "$TFTPD" = "inetd" ]; then
      return 0
    fi
  else
    # no standalone tftpd package, use dnsmasq for any tftpd setting
    if [ "$TFTPD" = "dnsmasq" -o "$TFTPD" = "tftpd" -o "$TFTPD" = "inetd" ]; then
      return 0
    fi
  fi

  return 1
}

isDHCPinterface()
{
  # args: IF
  for intf in $NODHCP; do
    if [ "$intf" = "$1" ]; then
      return 1
    fi
  done

  return 0
}

trueDNSMASQnet()
{
  # args: tag, IP, ip.dstart, ip.dend, leasetime, dnsList
  local servername="$2" gateway="$2"
  local dnsList="$6"

  if [ "$1" = "lan" ]; then
    servername="$HOSTNAME.$DOMAIN"
  elif [ "$1" = "ext" ]; then
    gateway="$EXTGW"
  fi
  # if no DNS servers provided then use this gateway IP address
  if [ -z "$dnsList" ]; then dnsList="$gateway"; fi

  echo "
dhcp-range=$1,$3,$4,$5
dhcp-option=$1,option:router,$gateway
dhcp-option=$1,option:dns-server,$dnsList
dhcp-option=$1,option:tftp-server,\"$servername\"
dhcp-option=$1,150,$2"

  # ntpd starts after we do, so check if its script is installed, because
  # the config file won't yet be present.
  if [ -f /etc/init.d/ntpd ]; then
    echo "dhcp-option=$1,option:ntp-server,$2"
  fi
}

falseDNSMASQnet()
{
  # args: IF
  echo "# IPv4 DHCP disabled on $1
no-dhcp-interface=$1"
}

addDNSinterface_name()
{
  local ilist="INTIF INT2IF INT3IF INT4IF DMZIF"
  local iname interface regex manualIPv4 manualIPv6
  local IFS
  local ipv6_set="" ipv4_set=""

  # Search in /etc/hosts to see if IP addresses set for our host.domain
  local etc_hosts=$(grep -o "^[^#]*" /tmp/etc/hosts | grep -e "[[:space:]]$HOSTNAME\.$DOMAIN\($\|[[:space:]]\)" | cut -f 1)
  if [ -n "$etc_hosts" ]; then
    # IP address(s) for host.domain already defined in /etc/hosts
    return 0
  else
    echo "
# Autogenerate DNS records for our host.domain"
  fi

  # Loop through all our internal interfaces to decide whether
  # to use dnsmasq's interface-name DNS feature.
  for iname in $ilist; do
    # find interface name e.g. eth1
    eval interface='$'$iname
    # find manually assigned IPv4 address from e.g. INTIP
    eval manualIPv4='$'${iname/%IF/IP}
    # find manually assigned IPv6 address from e.g. INTIPV6
    eval manualIPv6='$'${iname/%IF/IPV6}
    # We will use regex to find word in a string, e.g. INTIF in "DMZIF INTIF INT2IF"
    # Only set interface-name once, on the first interface we find that
    # supports the IP protocol version for each of IPv4 and IPv6
    regex="\b$iname\b"
    if [[ "$IPV6_PREFIX_DELEGATION" =~ $regex && "$DHCPV6_CLIENT_REQUEST_PREFIX" != "no" ]] ||
       [[ "$IPV6_PREFIX_ULA" =~ $regex ]] || [ -n "$manualIPv6" ]; then
      # an IPv6 is assigned to this interface.
      if [ -z "$ipv6_set" ]; then
        if [ -n "$manualIPv4" ] && [ -z "$ipv4_set" ]; then
          # set for both IPv4 and IPv6
          echo "interface-name=$HOSTNAME.$DOMAIN,$interface"
          ipv4_set="yes"
        else
          # set for IPv6 only as IPv4 done already
          echo "interface-name=$HOSTNAME.$DOMAIN,$interface/6"
        fi
        ipv6_set="yes"
      fi
    fi

    if [ -n "$manualIPv4" ] && [ -z "$ipv4_set" ]; then
      # an IPv4 is assigned to this interface
      echo "interface-name=$HOSTNAME.$DOMAIN,$interface/4"
      ipv4_set="yes"
    fi

    if [ -n "$ipv4_set" ] && [ -n "$ipv6_set" ]; then
      # Once both IPv4 and IPv6 addresses set we can break out
      break
    fi
  done
  return 0
}

addIPV6net()
{
  # args: IFname, tag, leasetime
  local iname="$1" tag="$2"
  local manualIPv6="" interface="" regex
  local IFS
  local dnsAddrs dnsList="" dnsIP

  # find interface name (e.g. eth1) from interface ID (e.g. INTIF)
  eval interface='$'$iname
  if [ -n "$interface" -a "$interface" != "none" -a "$IPV6" != "yes" ]; then
    return 2
  fi

  # find manually assigned IPv6 address from e.g. INTIPV6)
  eval manualIPv6='$'${iname/%IF/IPV6}

  # We will use regex to find word in a string, e.g. INTIF in "DMZIF INTIF INT2IF"
  regex="\b$iname\b"
  if [[ "$IPV6_PREFIX_DELEGATION" =~ $regex && "$DHCPV6_CLIENT_REQUEST_PREFIX" != "no" ]] ||
     [[ "$IPV6_PREFIX_ULA" =~ $regex ]] || [ -n "$manualIPv6" ]; then
    # an IPv6 is assigned to this interface.  Proceed.
    if [[ "$IPV6_AUTOCONF_DHCP" =~ $regex ]] || [[ "$IPV6_AUTOCONF_DHCP_ONLY" =~ $regex ]]; then
      # find list of DNS servers from e.g. INTDNS
      eval dnsAddrs='$'${iname/%IF/DNS}
      # now extract only IPv6 addresses and format them as required by dnsmasq
      IFS=$' ,'
      for dnsIP in $dnsAddrs; do
        get_numeric_ip_version "$dnsIP"
        if [ $? -eq 6 ]; then
          if [ -z "$dnsList" ]; then dnsList="[$dnsIP]"
            else dnsList="$dnsList,[$dnsIP]"
          fi
        fi
      done
      unset IFS
      # if no IPv6 DNS servers provided then use [::] (which means IP addr of this interface)
      if [ -z "$dnsList" ]; then dnsList="[::]"; fi

      if [ -z "$DHCPV6RANGE" ]; then
        DHCPV6RANGE="::1000,::ffff"
      fi
      if [[ "$IPV6_AUTOCONF_DHCP" =~ $regex ]]; then
        SLAAC=",slaac"
      else
        SLAAC=""
      fi
      echo ""
      echo "# Enable IPv6 Stateful DHCP and RA Names on $interface, optionally with SLAAC"
      echo "dhcp-range=$tag,$DHCPV6RANGE,constructor:$interface,ra-names$SLAAC,${DHCP_LEASETIME:-24}h"
      echo "dhcp-option=$tag,option6:dns-server,$dnsList"
      echo "dhcp-option=$tag,option6:domain-search,$DOMAIN"
      return 0
    elif [[ "$IPV6_AUTOCONF_STATELESS_DHCP" =~ $regex ]]; then
      echo ""
      echo "# Enable IPv6 Stateless DHCP and Router Advertisements on $interface"
      echo "dhcp-range=$tag,::,constructor:$interface,ra-names,ra-stateless,${DHCP_LEASETIME:-24}h"
      echo "dhcp-option=$tag,option6:dns-server,$dnsList"
      echo "dhcp-option=$tag,option6:domain-search,$DOMAIN"
      return 0
    elif [[ "$IPV6_AUTOCONF" =~ $regex ]]; then
      echo ""
      echo "# Enable IPv6 Router Advertisements only on $interface"
      echo "dhcp-range=$tag,::,constructor:$interface,ra-only,${DHCP_LEASETIME:-24}h"
      return 0
    else
      echo ""
      echo "# No IPv6 Router Advertisements on $interface"
      return 0
    fi
  fi

  return 1
}

addDNSMASQnet()
{
  # args: IF, IP, NM, DNS tag
  local max_hosts range_min range_max ip_min ip_max leasetime
  local IFS
  local dnsAddrs="$4" dnsList="" dnsIP

  if [ -n "$1" -a "$1" != "none" -a -n "$2" -a -n "$3" ]; then
    leasetime="${DHCP_LEASETIME:-24}h"
    if isDHCPinterface $1; then
      if [ -n "$DHCPRANGE" ]; then
        range_min=$(echo "$DHCPRANGE" | cut -d: -f1)
        range_max=$(echo "$DHCPRANGE" | cut -d: -f2)
      else
        range_min=100
        range_max=220
      fi

      max_hosts="$(netcalc "$2" "$3" | sed -n -r -e 's/^Hosts\/Net *: *([0-9]+).*$/\1/p')"
      if [ -n "$max_hosts" ]; then
        if [ $range_max -gt $max_hosts ]; then
          range_max=$(($max_hosts - ($max_hosts / 4) - 1))
        fi
        if [ $range_min -ge $range_max ]; then
          range_min=$(($range_max - ($max_hosts / 4) - 1))
        fi
        if [ $range_min -le 0 ]; then
          range_min=$((($max_hosts / 4) + 1))
        fi
        if [ $range_max -le $range_min ]; then
          range_max=$(($range_min + ($max_hosts / 4) + 1))
        fi
      fi

      ip_min="$(netcalc -R "$range_min:$range_max" "$2" "$3" | sed -n -r -e 's/^RangeMin *: *([0-9.]+).*$/\1/p')"
      ip_max="$(netcalc -R "$range_min:$range_max" "$2" "$3" | sed -n -r -e 's/^RangeMax *: *([0-9.]+).*$/\1/p')"

      # dnsAddrs is a list of DNS server IP addresses.
      # extract only IPv4 addresses and format them as required by dnsmasq
      IFS=$' ,'
      for dnsIP in $dnsAddrs; do
        get_numeric_ip_version "$dnsIP"
        if [ $? -eq 4 ]; then
          if [ -z "$dnsList" ]; then dnsList="$dnsIP"
            else dnsList="$dnsList,$dnsIP"
          fi
        fi
      done
      unset IFS

      trueDNSMASQnet $5 $2 "$ip_min" "$ip_max" $leasetime $dnsList

    else
      falseDNSMASQnet $1
    fi
  fi
}

createDNSMASQbasic()
{
  local local_domain dnscrypt_tls_servers server IFS

  # DHCP options
  if [ "$1" = "dhcp" ]; then
    echo "dhcp-authoritative
read-ethers
dhcp-leasefile=/var/db/dnsmasq.leases"

    if [ -n "$NFSDROOTPATH" ]; then
      echo "dhcp-option=lan,17,$NFSDROOTPATH"
    fi

    if [ -n "$BOOTPFILE" ]; then
      echo "dhcp-boot=$BOOTPFILE,$HOSTNAME.$DOMAIN,$INTIP"
    fi
  fi

  if [ "$LOCALDNS_LOCAL_DOMAIN" = "no" ]; then
    local_domain="#"
  else
    local_domain=""
  fi

  # DNS options
  echo "no-negcache
domain-needed
${local_domain}bogus-priv
${local_domain}local=/$DOMAIN/
expand-hosts
domain=$DOMAIN"

  # Some directives can only be defined once
  if ! directive_exists_with_file "cache-size" /etc/dnsmasq.static; then
    echo "cache-size=4096"
  fi
  if ! directive_exists_with_file "dns-forward-max" /etc/dnsmasq.static; then
    echo "dns-forward-max=512"
  fi

  dnscrypt_tls_servers="$(dnscrypt_tls_proxy_servers)"
  if [ -n "$dnscrypt_tls_servers" ]; then
    echo "no-resolv
proxy-dnssec"
    unset IFS
    for server in $dnscrypt_tls_servers; do
      echo "server=$server"
    done
  else
    echo "resolv-file=/etc/resolv-extern.conf"
  fi

  # TFTP options
  if tftpd_check; then
    echo "enable-tftp
tftp-root=/tftpboot"
  fi

  # IPv6 Options
  if [ "$IPV6" = "yes" ]; then
    echo "quiet-ra"
  fi
}

addDHCPhosts_options()
{
  local name ip mac IFS

  echo "
# because APC SmartUPS units are particular...
dhcp-option=vendor:APC,1,\"1APC\"
dhcp-option=vendor:APC,2,1b"

  if [ -n "$STATICHOSTS" ]; then
    echo "
# generated from STATICHOSTS in rc.conf"

    IFS=$'\n'
    for i in $STATICHOSTS; do
      # might have fqdn<space>hostname, etc.
      name="$(echo "$i" | awk -F~ '{ print $1; }' | awk -F' ' '{ print $1; }')"
      ip="$(echo "$i" | awk -F~ '{ print $2; }')"
      mac="$(echo "$i" | awk -F~ '{ print $3; }')"
      # Only allow IPv4 addresses in DHCP
      get_numeric_ip_version "$ip"
      if [ $? -eq 4 -a -n "$name" -a -n "$ip" -a -n "$mac" ]; then
        echo "dhcp-host=$mac,$ip,$name"
      fi
    done
  fi
}

which_extern_resolv()
{
  if [ -n "$DNS" ]; then
    echo "/tmp/etc/resolv-static.conf"
  elif isextppp; then
    echo "/tmp/etc/ppp/resolv.conf"
  else
    echo "/tmp/etc/resolv-up.conf"
  fi
}

is_EXTDHCP_active()
{

  # Applies to static EXTIP address, no EXT2IF and no PPPoE
  if [ "$EXTDHCP" = "yes" -a -n "$EXTIP" -a -n "$EXTGW" -a -z "$EXT2IF" -a -z "$PPPOEIF" ]; then
    if [ -n "$EXTIF" -a "$EXTIF" != "none" ] && isDHCPinterface $EXTIF; then
      return 0
    fi
  fi

  return 1
}

is_DHCP_active()
{

  for intf in $INTIF $INT2IF $INT3IF $INT4IF $DMZIF; do
    if [ "$intf" != "none" ] && isDHCPinterface $intf; then
      return 0
    fi
  done

  return 1
}

is_IPV6RA_active()
{
  if [ -n "IPV6_AUTOCONF_DHCP_ONLY" -o -n "IPV6_AUTOCONF_DHCP" -o -n "IPV6_AUTOCONF" -o -n "IPV6_AUTOCONF_STATELESS_DHCP" ]; then
    return 1
  fi

  return 0
}

init () {
  local DB

  if tftpd_check; then
    if [ -d /mnt/kd/tftpboot ]; then
      ln -snf /mnt/kd/tftpboot /tmp/tftpboot
    else
      mkdir /tmp/tftpboot
    fi
  fi

  : > /tmp/etc/resolv-static.conf
  for h in $DNS; do
    get_numeric_ip_version "$h"
    case $? in
      4)
        echo "nameserver $h" >> /tmp/etc/resolv-static.conf
        ;;
      6)
        if [ "$IPV6" = "yes" ]; then
          echo "nameserver $h" >> /tmp/etc/resolv-static.conf
        fi
        ;;
    esac
  done

  ext_resolv_conf=$(which_extern_resolv)
  ln -sf $ext_resolv_conf /tmp/etc/resolv-extern.conf
  if [ "$LOCALDNS" != "no" ]; then
    rm -f /tmp/etc/resolv.conf
    echo "search $DOMAIN
nameserver 127.0.0.1" > /tmp/etc/resolv.conf
  else
    ln -sf $ext_resolv_conf /tmp/etc/resolv.conf
  fi

  # Regenerate /etc/hosts
  # Allows dnsmasq to be restarted with a new STATICHOSTS
  SYS_gen_etc_hosts > /tmp/etc/hosts
  # Regenerate /etc/ethers
  SYS_gen_etc_ethers > /tmp/etc/ethers

  if [ -f /mnt/kd/dnsmasq.leases ]; then
    ln -sf /mnt/kd/dnsmasq.leases /var/db/dnsmasq.leases
  else
    touch /var/db/dnsmasq.leases
  fi

  # dhcp-script=/etc/dnsmasq-lease.script
  # Restore from persistent backup, DB file is on tmpfs
  for DB in "/var/db/dnsmasq-lease.db" "/var/db/dnsmasq-lease6.db"; do
    if [ -f "/mnt/kd/${DB##*/}" ] && [ ! -f "$DB" ]; then
      cp "/mnt/kd/${DB##*/}" "$DB"
    fi
  done

  rm -f /tmp/etc/dnsmasq.conf

  if [ -f /mnt/kd/dnsmasq.static ]; then
    ln -sf /mnt/kd/dnsmasq.static /tmp/etc/dnsmasq.static
  fi

  if [ -f /mnt/kd/dnsmasq.conf ]; then
    ln -sf /mnt/kd/dnsmasq.conf /tmp/etc/dnsmasq.conf
    return
  fi

  if is_DHCP_active || is_EXTDHCP_active || is_IPV6RA_active; then
    createDNSMASQbasic dhcp >> /tmp/etc/dnsmasq.conf
    addDNSinterface_name >> /tmp/etc/dnsmasq.conf

    addDNSMASQnet "$INTIF" "$INTIP" "$INTNM" "$INTDNS" lan >> /tmp/etc/dnsmasq.conf
    addIPV6net "INTIF" lan >> /tmp/etc/dnsmasq.conf

    addDNSMASQnet "$INT2IF" "$INT2IP" "$INT2NM" "$INT2DNS" lan2 >> /tmp/etc/dnsmasq.conf
    addIPV6net "INT2IF" lan2 >> /tmp/etc/dnsmasq.conf

    addDNSMASQnet "$INT3IF" "$INT3IP" "$INT3NM" "$INT3DNS" lan3 >> /tmp/etc/dnsmasq.conf
    addIPV6net "INT3IF" lan3 >> /tmp/etc/dnsmasq.conf

    addDNSMASQnet "$INT4IF" "$INT4IP" "$INT4NM" "$INT4DNS" lan4 >> /tmp/etc/dnsmasq.conf
    addIPV6net "INT4IF" lan4 >> /tmp/etc/dnsmasq.conf

    addDNSMASQnet "$DMZIF" "$DMZIP" "$DMZNM" "$DMZDNS" dmz >> /tmp/etc/dnsmasq.conf
    addIPV6net "DMZIF" dmz >> /tmp/etc/dnsmasq.conf

    if is_EXTDHCP_active; then
      addDNSMASQnet "$EXTIF" "$EXTIP" "$EXTNM" "$EXTDNS" ext >> /tmp/etc/dnsmasq.conf
    fi

    addDHCPhosts_options >> /tmp/etc/dnsmasq.conf
  else
    createDNSMASQbasic nodhcp >> /tmp/etc/dnsmasq.conf
    addDNSinterface_name >> /tmp/etc/dnsmasq.conf
  fi

  # include static mappings from a file
  if [ -f /etc/dnsmasq.static ]; then
    echo "
conf-file=/etc/dnsmasq.static" >> /tmp/etc/dnsmasq.conf
  else
    echo "# Create /mnt/kd/dnsmasq.static to specify additional settings." >> /tmp/etc/dnsmasq.conf
  fi
}

start () {
  if [ -f /etc/dnsmasq.conf ]; then
    echo "Starting dnsmasq..."
    dnsmasq
  fi
}

stop () {
  if [ -f /var/run/dnsmasq.pid ]; then
    echo "Stopping dnsmasq..."
    kill $(cat /var/run/dnsmasq.pid)
    rm -f /var/run/dnsmasq.pid
  fi
}

case $1 in

start)
  start
  ;;

stop)
  stop
  ;;

init)
  init
  start
  ;;

restart)
  stop
  sleep 2
  start
  ;;

*)
  echo "Usage: start|stop|restart"
  ;;

esac

